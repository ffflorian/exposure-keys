name: Build, test and publish

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  build_lint_test:
    name: Build, test and publish
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
        with:
          fetch-depth: 2

      - name: Get commit message
        run: |
          PR_TITLE="${{github.event.pull_request.title}}"
          GH_COMMIT_MESSAGE="${{github.event.head_commit.message}}"
          GIT_COMMIT_MESSAGE="$(git log --format=%B -n 1 ${{github.event.after}} | head -n 1)"
          echo "BRANCH_NAME=\"$(git branch --show-current)\"" >> $GITHUB_ENV
          echo "COMMIT_MESSAGE=\"$(test "${GH_COMMIT_MESSAGE}" && echo "${GH_COMMIT_MESSAGE}" || echo "${GIT_COMMIT_MESSAGE}")\"" >> $GITHUB_ENV
          echo "TITLE=\"${PR_TITLE}\"" >> $GITHUB_ENV

      - name: Echo environment variables
        run: |
          echo "BRANCH_NAME=\"${{env.BRANCH_NAME}}\""
          echo "COMMIT_MESSAGE=\"${{env.COMMIT_MESSAGE}}\""
          echo "TITLE=\"${{env.TITLE}}\""

      - name: Set up Node.js
        uses: actions/setup-node@v1
        with:
          node-version: 14.x
        if: |
          !contains(env.COMMIT_MESSAGE || env.TITLE, '[ci skip]') &&
          !contains(env.COMMIT_MESSAGE || env.TITLE, '[skip ci]')

      - name: Get yarn cache
        id: yarn-cache-dir-path
        run: echo "::set-output name=dir::$(yarn cache dir)"
      - uses: actions/cache@v2
        id: yarn-cache # use this to check for `cache-hit` (`steps.yarn-cache.outputs.cache-hit != 'true'`)
        with:
          path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-
        if: |
          !contains(env.COMMIT_MESSAGE || env.TITLE, '[ci skip]') &&
          !contains(env.COMMIT_MESSAGE || env.TITLE, '[skip ci]')

      - name: Build, lint and test
        run: |
          yarn
          yarn lint
          yarn test
          yarn dist
          yarn flatten
        if: |
          !contains(env.COMMIT_MESSAGE || env.TITLE, '[ci skip]') &&
          !contains(env.COMMIT_MESSAGE || env.TITLE, '[skip ci]')

      - name: Release on npm
        env:
          GIT_AUTHOR_NAME: ffflobot
          GIT_AUTHOR_EMAIL: ffflobot@users.noreply.github.com
          GIT_COMMITTER_NAME: ffflobot
          GIT_COMMITTER_EMAIL: ffflobot@users.noreply.github.com
          GITHUB_TOKEN: ${{secrets.GITHUB_TOKEN}}
          NPM_TOKEN: ${{secrets.NPM_TOKEN}}
        run: |
          git config --global "user.email" "${GIT_AUTHOR_EMAIL}"
          git config --global "user.name" "${GIT_AUTHOR_NAME}"
          REPO_URL="$(git remote get-url origin | sed -n "s/https:\/\/github.com\//https:\/\/${GIT_AUTHOR_NAME}:${GH_TOKEN}@github.com\//p")"
          yarn release -r "${REPO_URL}"
        if: |
          !contains(env.COMMIT_MESSAGE || env.TITLE, '[ci skip]') &&
          !contains(env.COMMIT_MESSAGE || env.TITLE, '[skip ci]') &&
          !startsWith(env.COMMIT_MESSAGE || env.TITLE, 'chore') &&
          env.BRANCH_NAME == 'main'

      - name: Release on GitHub
        env:
          GITHUB_TOKEN: ${{secrets.GITHUB_TOKEN}}
        run: |
          rm .npmrc
          echo "//npm.pkg.github.com/:_authToken=${GITHUB_TOKEN}" > ~/.npmrc
          cd flattened
          sed -i "s/\"name\": \"/\"name\": \"@ffflorian\//" package.json
          npm publish --registry=https://npm.pkg.github.com || true
        if: |
          !contains(env.COMMIT_MESSAGE || env.TITLE, '[ci skip]') &&
          !contains(env.COMMIT_MESSAGE || env.TITLE, '[skip ci]') &&
          !startsWith(env.COMMIT_MESSAGE || env.TITLE, 'chore') &&
          env.BRANCH_NAME == 'main'
